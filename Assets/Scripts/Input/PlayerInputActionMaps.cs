//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/PlayerInputActionMaps.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace RTS.Input
{
    public partial class @PlayerInputActionMaps : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActionMaps()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActionMaps"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""466a91ef-07cc-47c2-a50d-148f7b240da0"",
            ""actions"": [
                {
                    ""name"": ""Open Console"",
                    ""type"": ""Button"",
                    ""id"": ""790354b6-4d38-4add-94f2-9686c5a853d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c28783da-833b-402d-b449-da9dddc68da3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""7868873e-7f24-4535-8ba2-a3d7bc3f807f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Left Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""52013e25-c596-41b6-aa12-397f6426c186"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""e5933862-a6d5-487b-86a2-78f2d6726496"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e719103f-197c-4630-af4d-db363f93b303"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open Console"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6187a3f9-0d47-4783-8cda-8647fffd743b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2d2c499b-7fe7-41d7-92ce-afa9d527a7a3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""621c6631-f3a6-46c9-b462-891f014be225"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fed34c2b-d470-49be-b8f3-cb0b2a29a820"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""449a6711-38aa-4a45-b2fe-07b694e80b0c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a82a0dda-8339-4d27-943f-25601917286d"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d23f425-a8a3-4188-a20f-3550d65a2f36"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ad29279-994b-4596-972c-5a906aae6d38"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug Console"",
            ""id"": ""8c844925-9c93-4c71-bb3b-940dd216f61d"",
            ""actions"": [
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""ee31e101-30fe-4f3e-a26f-09a32d0068a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""efdfe22c-9517-4716-a46a-e6d3baa01c68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a9dea757-f97f-4421-88fa-6db36a50d5e4"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dd209ab-db91-4f89-beb6-96b3ee50e412"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_OpenConsole = m_Gameplay.FindAction("Open Console", throwIfNotFound: true);
            m_Gameplay_CameraMovement = m_Gameplay.FindAction("Camera Movement", throwIfNotFound: true);
            m_Gameplay_CameraZoom = m_Gameplay.FindAction("Camera Zoom", throwIfNotFound: true);
            m_Gameplay_LeftMouse = m_Gameplay.FindAction("Left Mouse", throwIfNotFound: true);
            m_Gameplay_RightMouse = m_Gameplay.FindAction("Right Mouse", throwIfNotFound: true);
            // Debug Console
            m_DebugConsole = asset.FindActionMap("Debug Console", throwIfNotFound: true);
            m_DebugConsole_Submit = m_DebugConsole.FindAction("Submit", throwIfNotFound: true);
            m_DebugConsole_Exit = m_DebugConsole.FindAction("Exit", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private IGameplayActions m_GameplayActionsCallbackInterface;
        private readonly InputAction m_Gameplay_OpenConsole;
        private readonly InputAction m_Gameplay_CameraMovement;
        private readonly InputAction m_Gameplay_CameraZoom;
        private readonly InputAction m_Gameplay_LeftMouse;
        private readonly InputAction m_Gameplay_RightMouse;
        public struct GameplayActions
        {
            private @PlayerInputActionMaps m_Wrapper;
            public GameplayActions(@PlayerInputActionMaps wrapper) { m_Wrapper = wrapper; }
            public InputAction @OpenConsole => m_Wrapper.m_Gameplay_OpenConsole;
            public InputAction @CameraMovement => m_Wrapper.m_Gameplay_CameraMovement;
            public InputAction @CameraZoom => m_Wrapper.m_Gameplay_CameraZoom;
            public InputAction @LeftMouse => m_Wrapper.m_Gameplay_LeftMouse;
            public InputAction @RightMouse => m_Wrapper.m_Gameplay_RightMouse;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void SetCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
                {
                    @OpenConsole.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnOpenConsole;
                    @OpenConsole.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnOpenConsole;
                    @OpenConsole.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnOpenConsole;
                    @CameraMovement.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCameraMovement;
                    @CameraMovement.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCameraMovement;
                    @CameraMovement.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCameraMovement;
                    @CameraZoom.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCameraZoom;
                    @CameraZoom.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCameraZoom;
                    @CameraZoom.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCameraZoom;
                    @LeftMouse.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftMouse;
                    @LeftMouse.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftMouse;
                    @LeftMouse.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftMouse;
                    @RightMouse.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightMouse;
                    @RightMouse.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightMouse;
                    @RightMouse.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightMouse;
                }
                m_Wrapper.m_GameplayActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @OpenConsole.started += instance.OnOpenConsole;
                    @OpenConsole.performed += instance.OnOpenConsole;
                    @OpenConsole.canceled += instance.OnOpenConsole;
                    @CameraMovement.started += instance.OnCameraMovement;
                    @CameraMovement.performed += instance.OnCameraMovement;
                    @CameraMovement.canceled += instance.OnCameraMovement;
                    @CameraZoom.started += instance.OnCameraZoom;
                    @CameraZoom.performed += instance.OnCameraZoom;
                    @CameraZoom.canceled += instance.OnCameraZoom;
                    @LeftMouse.started += instance.OnLeftMouse;
                    @LeftMouse.performed += instance.OnLeftMouse;
                    @LeftMouse.canceled += instance.OnLeftMouse;
                    @RightMouse.started += instance.OnRightMouse;
                    @RightMouse.performed += instance.OnRightMouse;
                    @RightMouse.canceled += instance.OnRightMouse;
                }
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);

        // Debug Console
        private readonly InputActionMap m_DebugConsole;
        private IDebugConsoleActions m_DebugConsoleActionsCallbackInterface;
        private readonly InputAction m_DebugConsole_Submit;
        private readonly InputAction m_DebugConsole_Exit;
        public struct DebugConsoleActions
        {
            private @PlayerInputActionMaps m_Wrapper;
            public DebugConsoleActions(@PlayerInputActionMaps wrapper) { m_Wrapper = wrapper; }
            public InputAction @Submit => m_Wrapper.m_DebugConsole_Submit;
            public InputAction @Exit => m_Wrapper.m_DebugConsole_Exit;
            public InputActionMap Get() { return m_Wrapper.m_DebugConsole; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DebugConsoleActions set) { return set.Get(); }
            public void SetCallbacks(IDebugConsoleActions instance)
            {
                if (m_Wrapper.m_DebugConsoleActionsCallbackInterface != null)
                {
                    @Submit.started -= m_Wrapper.m_DebugConsoleActionsCallbackInterface.OnSubmit;
                    @Submit.performed -= m_Wrapper.m_DebugConsoleActionsCallbackInterface.OnSubmit;
                    @Submit.canceled -= m_Wrapper.m_DebugConsoleActionsCallbackInterface.OnSubmit;
                    @Exit.started -= m_Wrapper.m_DebugConsoleActionsCallbackInterface.OnExit;
                    @Exit.performed -= m_Wrapper.m_DebugConsoleActionsCallbackInterface.OnExit;
                    @Exit.canceled -= m_Wrapper.m_DebugConsoleActionsCallbackInterface.OnExit;
                }
                m_Wrapper.m_DebugConsoleActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Submit.started += instance.OnSubmit;
                    @Submit.performed += instance.OnSubmit;
                    @Submit.canceled += instance.OnSubmit;
                    @Exit.started += instance.OnExit;
                    @Exit.performed += instance.OnExit;
                    @Exit.canceled += instance.OnExit;
                }
            }
        }
        public DebugConsoleActions @DebugConsole => new DebugConsoleActions(this);
        public interface IGameplayActions
        {
            void OnOpenConsole(InputAction.CallbackContext context);
            void OnCameraMovement(InputAction.CallbackContext context);
            void OnCameraZoom(InputAction.CallbackContext context);
            void OnLeftMouse(InputAction.CallbackContext context);
            void OnRightMouse(InputAction.CallbackContext context);
        }
        public interface IDebugConsoleActions
        {
            void OnSubmit(InputAction.CallbackContext context);
            void OnExit(InputAction.CallbackContext context);
        }
    }
}
